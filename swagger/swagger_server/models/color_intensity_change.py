# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ColorIntensityChange(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, intensity_change: int=None):  # noqa: E501
        """ColorIntensityChange - a model defined in Swagger

        :param name: The name of this ColorIntensityChange.  # noqa: E501
        :type name: str
        :param intensity_change: The intensity_change of this ColorIntensityChange.  # noqa: E501
        :type intensity_change: int
        """
        self.swagger_types = {
            'name': str,
            'intensity_change': int
        }

        self.attribute_map = {
            'name': 'name',
            'intensity_change': 'intensityChange'
        }

        self._name = name
        self._intensity_change = intensity_change

    @classmethod
    def from_dict(cls, dikt) -> 'ColorIntensityChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The colorIntensityChange of this ColorIntensityChange.  # noqa: E501
        :rtype: ColorIntensityChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ColorIntensityChange.


        :return: The name of this ColorIntensityChange.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ColorIntensityChange.


        :param name: The name of this ColorIntensityChange.
        :type name: str
        """

        self._name = name

    @property
    def intensity_change(self) -> int:
        """Gets the intensity_change of this ColorIntensityChange.


        :return: The intensity_change of this ColorIntensityChange.
        :rtype: int
        """
        return self._intensity_change

    @intensity_change.setter
    def intensity_change(self, intensity_change: int):
        """Sets the intensity_change of this ColorIntensityChange.


        :param intensity_change: The intensity_change of this ColorIntensityChange.
        :type intensity_change: int
        """
        if intensity_change is not None and intensity_change > 100:  # noqa: E501
            raise ValueError("Invalid value for `intensity_change`, must be a value less than or equal to `100`")  # noqa: E501
        if intensity_change is not None and intensity_change < -100:  # noqa: E501
            raise ValueError("Invalid value for `intensity_change`, must be a value greater than or equal to `-100`")  # noqa: E501

        self._intensity_change = intensity_change
